local Library = {}
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local TextService = game:GetService("TextService")

local DESIGN = {
   MAIN_COLOR = Color3.fromRGB(30, 30, 35),
   ACCENT_COLOR = Color3.fromRGB(45, 45, 50),
   HIGHLIGHT = Color3.fromRGB(70, 130, 255),
   TEXT_COLOR = Color3.fromRGB(255, 255, 255),
   SECONDARY_TEXT = Color3.fromRGB(180, 180, 180),
   BORDER_COLOR = Color3.fromRGB(60, 60, 65),
   ERROR_COLOR = Color3.fromRGB(255, 75, 75),
   SUCCESS_COLOR = Color3.fromRGB(75, 255, 75),
   SHADOW = Color3.fromRGB(0, 0, 0),
   CORNER_RADIUS = UDim.new(0, 8),
   FONT = Enum.Font.GothamMedium,
   FONT_BOLD = Enum.Font.GothamBold,
   TWEEN_SPEED = 0.25
}

local ICONS = {
   HOME = "rbxassetid://7733960981",
   SETTINGS = "rbxassetid://7734053495",
   MINIMIZE = "rbxassetid://7733628917",
   CLOSE = "rbxassetid://7733715400",
   TOGGLE_ON = "rbxassetid://7734021300",
   TOGGLE_OFF = "rbxassetid://7734019361",
   SLIDER = "rbxassetid://7734130797",
   DROPDOWN = "rbxassetid://7734060708"
}

local function CreateElement(className, properties)
   local element = Instance.new(className)
   for property, value in pairs(properties) do
       element[property] = value
   end
   return element
end

local function ApplyGradient(frame, colorSequence)
   local gradient = CreateElement("UIGradient", {
       Color = colorSequence,
       Rotation = 90,
       Parent = frame
   })
   return gradient
end

local function ApplyShadow(parent, intensity)
   local shadow = CreateElement("ImageLabel", {
       Name = "Shadow",
       BackgroundTransparency = 1,
       Image = "rbxassetid://7743878358",
       ImageColor3 = DESIGN.SHADOW,
       ImageTransparency = 1 - intensity,
       Size = UDim2.new(1, 40, 1, 40),
       Position = UDim2.new(0, -20, 0, -20),
       ZIndex = parent.ZIndex - 1,
       Parent = parent
   })
   return shadow
end

local function CreateRipple(parent)
   local ripple = CreateElement("Frame", {
       BackgroundColor3 = Color3.fromRGB(255, 255, 255),
       BackgroundTransparency = 0.8,
       Position = UDim2.fromScale(0.5, 0.5),
       AnchorPoint = Vector2.new(0.5, 0.5),
       Size = UDim2.new(0, 0, 0, 0),
       Parent = parent
   })
   
   CreateElement("UICorner", {
       CornerRadius = UDim.new(1, 0),
       Parent = ripple
   })
   
   return ripple
end

local function StartRipple(button, ripple, mouse)
   local buttonPos = button.AbsolutePosition
   local clickPos = UDim2.new(0, mouse.X - buttonPos.X, 0, mouse.Y - buttonPos.Y)
   ripple.Position = clickPos
   
   local targetSize = UDim2.new(0, button.AbsoluteSize.X * 2, 0, button.AbsoluteSize.X * 2)
   local tween = TweenService:Create(ripple,
       TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
       {Size = targetSize, BackgroundTransparency = 1}
   )
   tween:Play()
   
   game.Debris:AddItem(ripple, 0.5)
end

function Library.new(title)
   local gui = {
       Connections = {},
       Tabs = {},
       ActiveTab = nil
   }
   
   gui.ScreenGui = CreateElement("ScreenGui", {
       Name = "ModernUI",
       ResetOnSpawn = false,
       ZIndexBehavior = Enum.ZIndexBehavior.Global
   })
   
   gui.MainFrame = CreateElement("Frame", {
       Name = "MainFrame",
       Size = UDim2.new(0, 650, 0, 400),
       Position = UDim2.new(0.5, -325, 0.5, -200),
       BackgroundColor3 = DESIGN.MAIN_COLOR,
       Parent = gui.ScreenGui
   })
   
   CreateElement("UICorner", {
       CornerRadius = DESIGN.CORNER_RADIUS,
       Parent = gui.MainFrame
   })
   
   CreateElement("UIStroke", {
       Color = DESIGN.BORDER_COLOR,
       Thickness = 1.5,
       Parent = gui.MainFrame
   })
   
   ApplyShadow(gui.MainFrame, 0.4)
   
   gui.TopBar = CreateElement("Frame", {
       Name = "TopBar",
       Size = UDim2.new(1, 0, 0, 40),
       BackgroundColor3 = DESIGN.ACCENT_COLOR,
       Parent = gui.MainFrame
   })
   
   CreateElement("UICorner", {
       CornerRadius = DESIGN.CORNER_RADIUS,
       Parent = gui.TopBar
   })
   
   gui.Title = CreateElement("TextLabel", {
       Name = "Title",
       Size = UDim2.new(1, -100, 1, 0),
       Position = UDim2.new(0, 15, 0, 0),
       BackgroundTransparency = 1,
       Text = title,
       TextColor3 = DESIGN.TEXT_COLOR,
       TextSize = 18,
       Font = DESIGN.FONT_BOLD,
       TextXAlignment = Enum.TextXAlignment.Left,
       Parent = gui.TopBar
   })
   
   gui.MinimizeButton = CreateElement("ImageButton", {
       Size = UDim2.new(0, 30, 0, 30),
       Position = UDim2.new(1, -35, 0, 5),
       BackgroundTransparency = 1,
       Image = ICONS.MINIMIZE,
       Parent = gui.TopBar
   })
   
   gui.TabContainer = CreateElement("ScrollingFrame", {
       Name = "TabContainer",
       Size = UDim2.new(0, 150, 1, -40),
       Position = UDim2.new(0, 0, 0, 40),
       BackgroundColor3 = DESIGN.ACCENT_COLOR,
       ScrollBarThickness = 2,
       ScrollBarImageColor3 = DESIGN.HIGHLIGHT,
       Parent = gui.MainFrame
   })
   
   CreateElement("UICorner", {
       CornerRadius = DESIGN.CORNER_RADIUS,
       Parent = gui.TabContainer
   })
   
   CreateElement("UIPadding", {
       PaddingTop = UDim.new(0, 5),
       PaddingBottom = UDim.new(0, 5),
       Parent = gui.TabContainer
   })
   
   gui.ContentContainer = CreateElement("Frame", {
       Name = "ContentContainer",
       Size = UDim2.new(1, -150, 1, -40),
       Position = UDim2.new(0, 150, 0, 40),
       BackgroundColor3 = DESIGN.MAIN_COLOR,
       Parent = gui.MainFrame
   })
   
   function gui:CreateTab(name, icon)
       local tab = {
           Elements = {},
           Visible = false
       }
       
       tab.Button = CreateElement("TextButton", {
           Name = name .. "Tab",
           Size = UDim2.new(1, -10, 0, 40),
           Position = UDim2.new(0, 5, 0, #self.Tabs * 45),
           BackgroundColor3 = DESIGN.MAIN_COLOR,
           BackgroundTransparency = 0.9,
           Parent = self.TabContainer
       })
       
       CreateElement("UICorner", {
           CornerRadius = UDim.new(0, 6),
           Parent = tab.Button
       })
       
       if icon then
           tab.Icon = CreateElement("ImageLabel", {
               Size = UDim2.new(0, 20, 0, 20),
               Position = UDim2.new(0, 10, 0.5, -10),
               BackgroundTransparency = 1,
               Image = icon,
               ImageColor3 = DESIGN.SECONDARY_TEXT,
               Parent = tab.Button
           })
       end
       
       tab.Label = CreateElement("TextLabel", {
           Size = UDim2.new(1, icon and -40 or -20, 1, 0),
           Position = UDim2.new(0, icon and 40 or 10, 0, 0),
           BackgroundTransparency = 1,
           Text = name,
           TextColor3 = DESIGN.SECONDARY_TEXT,
           TextSize = 14,
           Font = DESIGN.FONT,
           TextXAlignment = Enum.TextXAlignment.Left,
           Parent = tab.Button
       })
       
       tab.Content = CreateElement("ScrollingFrame", {
           Name = name .. "Content",
           Size = UDim2.new(1, -20, 1, -20),
           Position = UDim2.new(0, 10, 0, 10),
           BackgroundTransparency = 1,
           ScrollBarThickness = 2,
           ScrollBarImageColor3 = DESIGN.HIGHLIGHT,
           Visible = false,
           Parent = self.ContentContainer
       })
       
       CreateElement("UIListLayout", {
           Padding = UDim.new(0, 10),
           Parent = tab.Content
       })
       
       tab.Button.MouseButton1Click:Connect(function()
           if self.ActiveTab then
               TweenService:Create(self.ActiveTab.Button, 
                   TweenInfo.new(DESIGN.TWEEN_SPEED), 
                   {BackgroundTransparency = 0.9}
               ):Play()
               TweenService:Create(self.ActiveTab.Label,
                   TweenInfo.new(DESIGN.TWEEN_SPEED),
                   {TextColor3 = DESIGN.SECONDARY_TEXT}
               ):Play()
               if self.ActiveTab.Icon then
                   TweenService:Create(self.ActiveTab.Icon,
                       TweenInfo.new(DESIGN.TWEEN_SPEED),
                       {ImageColor3 = DESIGN.SECONDARY_TEXT}
                   ):Play()
               end
               self.ActiveTab.Content.Visible = false
           end
           
           self.ActiveTab = tab
           TweenService:Create(tab.Button,
               TweenInfo.new(DESIGN.TWEEN_SPEED),
               {BackgroundTransparency = 0}
           ):Play()
           TweenService:Create(tab.Label,
               TweenInfo.new(DESIGN.TWEEN_SPEED),
               {TextColor3 = DESIGN.TEXT_COLOR}
           ):Play()
           if tab.Icon then
               TweenService:Create(tab.Icon,
                   TweenInfo.new(DESIGN.TWEEN_SPEED),
                   {ImageColor3 = DESIGN.HIGHLIGHT}
               ):Play()
           end
           tab.Content.Visible = true
           
           local ripple = CreateRipple(tab.Button)
           local mouse = UserInputService:GetMouseLocation()
           StartRipple(tab.Button, ripple, mouse)
       end)
       
       function tab:AddButton(text, callback)
           local button = CreateElement("TextButton", {
               Size = UDim2.new(1, 0, 0, 40),
               BackgroundColor3 = DESIGN.ACCENT_COLOR,
               Parent = self.Content
           })
           
           CreateElement("UICorner", {
               CornerRadius = UDim.new(0, 6),
               Parent = button
           })
           
           CreateElement("TextLabel", {
               Size = UDim2.new(1, -20, 1, 0),
               Position = UDim2.new(0, 10, 0, 0),
               BackgroundTransparency = 1,
               Text = text,
               TextColor3 = DESIGN.TEXT_COLOR,
               TextSize = 14,
               Font = DESIGN.FONT,
               TextXAlignment = Enum.TextXAlignment.Left,
               Parent = button
           })
           
           button.MouseButton1Click:Connect(function()
               local ripple = CreateRipple(button)
               local mouse = UserInputService:GetMouseLocation()
               StartRipple(button, ripple, mouse)
               callback()
           end)
           
           return button
       end
       
       function tab:AddToggle(text, callback)
           local toggle = CreateElement("Frame", {
               Size = UDim2.new(1, 0, 0, 40),
               BackgroundColor3 = DESIGN.ACCENT_COLOR,
               Parent = self.Content
           })
           
           CreateElement("UICorner", {
               CornerRadius = UDim.new(0, 6),
               Parent = toggle
           })
           
           local label = CreateElement("TextLabel", {
               Size = UDim2.new(1, -60, 1, 0),
               Position = UDim2.new(0, 10, 0, 0),
               BackgroundTransparency = 1,
               Text = text,
               TextColor3 = DESIGN.TEXT_COLOR,
               TextSize = 14,
               Font = DESIGN.FONT,
               TextXAlignment = Enum.TextXAlignment.Left,
               Parent = toggle
           })
           
           local toggleButton = CreateElement("ImageButton", {
               Size = UDim2.new(0, 40, 0, 24),
               Position = UDim2.new(1, -50, 0.5, -12),
               BackgroundTransparency = 1,
               Image = ICONS.TOGGLE_OFF,
               Parent = toggle
           })
           
           local enabled = false
           toggleButton.MouseButton1Click:Connect(function()
               enabled = not enabled
               toggleButton.Image = enabled and ICONS.TOGGLE_ON or ICONS.TOGGLE_OFF
               callback(enabled)
           end)
           
           return toggle
       end
       
       function tab:AddSlider(text, min, max, default, callback)
           local slider = CreateElement("Frame", {
               Size = UDim2.new(1, 0, 0, 60),
               BackgroundColor3 = DESIGN.ACCENT_COLOR,
               Parent = self.Content
           })
           
           CreateElement("UICorner", {
               CornerRadius = UDim.new(0, 6),
               Parent = slider
           })
           
           local label = CreateElement("TextLabel", {
                   Size = UDim2.new(1, -20, 0, 30),
                   Position = UDim2.new(0, 10, 0, 0),
                   BackgroundTransparency = 1,
                   Text = text,
                   TextColor3 = DESIGN.TEXT_COLOR,
                   TextSize = 14,
                   Font = DESIGN.FONT,
                   TextXAlignment = Enum.TextXAlignment.Left,
                   Parent = slider
               })

               local sliderBar = CreateElement("Frame", {
                   Size = UDim2.new(1, -20, 0, 6),
                   Position = UDim2.new(0, 10, 0, 40),
                   BackgroundColor3 = DESIGN.MAIN_COLOR,
                   Parent = slider
               })

               CreateElement("UICorner", {
                   CornerRadius = UDim.new(1, 0),
                   Parent = sliderBar
               })

               local sliderFill = CreateElement("Frame", {
                   Size = UDim2.new(0, 0, 1, 0),
                   BackgroundColor3 = DESIGN.HIGHLIGHT,
                   Parent = sliderBar
               })

               CreateElement("UICorner", {
                   CornerRadius = UDim.new(1, 0),
                   Parent = sliderFill
               })

               local handle = CreateElement("ImageButton", {
                   Size = UDim2.new(0, 16, 0, 16),
                   Position = UDim2.new(0, -8, 0.5, -8),
                   BackgroundColor3 = DESIGN.TEXT_COLOR,
                   Image = ICONS.SLIDER,
                   Parent = sliderFill
               })

               CreateElement("UICorner", {
                   CornerRadius = UDim.new(1, 0),
                   Parent = handle
               })

               local value = default or min
               local dragging = false

               local function updateSlider(input)
                   local pos = input.Position.X
                   local barPos = sliderBar.AbsolutePosition.X
                   local barSize = sliderBar.AbsoluteSize.X
                   local percentage = math.clamp((pos - barPos) / barSize, 0, 1)
                   value = min + (max - min) * percentage
                   
                   TweenService:Create(sliderFill, 
                       TweenInfo.new(0.1),
                       {Size = UDim2.new(percentage, 0, 1, 0)}
                   ):Play()
                   
                   label.Text = string.format("%s: %d", text, value)
                   callback(value)
               end

               handle.MouseButton1Down:Connect(function()
                   dragging = true
               end)

               UserInputService.InputChanged:Connect(function(input)
                   if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                       updateSlider(input)
                   end
               end)

               UserInputService.InputEnded:Connect(function(input)
                   if input.UserInputType == Enum.UserInputType.MouseButton1 then
                       dragging = false
                   end
               end)

               -- Set initial value
               local initialPercentage = (default - min) / (max - min)
               sliderFill.Size = UDim2.new(initialPercentage, 0, 1, 0)
               label.Text = string.format("%s: %d", text, default)

               return slider
           end
           
           function tab:AddDropdown(text, options, callback)
               local dropdown = CreateElement("Frame", {
                   Size = UDim2.new(1, 0, 0, 40),
                   BackgroundColor3 = DESIGN.ACCENT_COLOR,
                   ClipsDescendants = true,
                   Parent = self.Content
               })

               CreateElement("UICorner", {
                   CornerRadius = UDim.new(0, 6),
                   Parent = dropdown
               })

               local label = CreateElement("TextLabel", {
                   Size = UDim2.new(1, -40, 1, 0),
                   Position = UDim2.new(0, 10, 0, 0),
                   BackgroundTransparency = 1,
                   Text = text,
                   TextColor3 = DESIGN.TEXT_COLOR,
                   TextSize = 14,
                   Font = DESIGN.FONT,
                   TextXAlignment = Enum.TextXAlignment.Left,
                   Parent = dropdown
               })

               local arrow = CreateElement("ImageButton", {
                   Size = UDim2.new(0, 20, 0, 20),
                   Position = UDim2.new(1, -30, 0.5, -10),
                   BackgroundTransparency = 1,
                   Image = ICONS.DROPDOWN,
                   Parent = dropdown
               })

               local optionsList = CreateElement("Frame", {
                   Size = UDim2.new(1, 0, 0, #options * 30),
                   Position = UDim2.new(0, 0, 0, 40),
                   BackgroundTransparency = 1,
                   Visible = false,
                   Parent = dropdown
               })

               local isOpen = false
               local function toggleDropdown()
                   isOpen = not isOpen
                   local targetSize = isOpen and UDim2.new(1, 0, 0, 40 + #options * 30) or UDim2.new(1, 0, 0, 40)
                   
                   TweenService:Create(dropdown,
                       TweenInfo.new(DESIGN.TWEEN_SPEED),
                       {Size = targetSize}
                   ):Play()
                   
                   TweenService:Create(arrow,
                       TweenInfo.new(DESIGN.TWEEN_SPEED),
                       {Rotation = isOpen and 180 or 0}
                   ):Play()
                   
                   optionsList.Visible = isOpen
               end

               arrow.MouseButton1Click:Connect(toggleDropdown)

               for i, option in ipairs(options) do
                   local optionButton = CreateElement("TextButton", {
                       Size = UDim2.new(1, 0, 0, 30),
                       Position = UDim2.new(0, 0, 0, (i-1) * 30),
                       BackgroundColor3 = DESIGN.MAIN_COLOR,
                       BackgroundTransparency = 0.5,
                       Text = option,
                       TextColor3 = DESIGN.TEXT_COLOR,
                       TextSize = 14,
                       Font = DESIGN.FONT,
                       Parent = optionsList
                   })

                   CreateElement("UICorner", {
                       CornerRadius = UDim.new(0, 6),
                       Parent = optionButton
                   })

                   optionButton.MouseButton1Click:Connect(function()
                       label.Text = text .. ": " .. option
                       toggleDropdown()
                       callback(option)
                   end)
               end

               return dropdown
           end

           table.insert(self.Tabs, tab)
           return tab
       end

       -- Minimize animation
       local minimized = false
       local originalSize = gui.MainFrame.Size
       gui.MinimizeButton.MouseButton1Click:Connect(function()
           minimized = not minimized
           local targetSize = minimized and UDim2.new(0, 650, 0, 40) or originalSize
           
           TweenService:Create(gui.MainFrame,
               TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.InOut),
               {Size = targetSize}
           ):Play()
           
           TweenService:Create(gui.MinimizeButton,
               TweenInfo.new(0.5),
               {Rotation = minimized and 180 or 0}
           ):Play()
       end)

       -- Dragging functionality
       local dragging, dragStart, startPos
       
       gui.TopBar.InputBegan:Connect(function(input)
           if input.UserInputType == Enum.UserInputType.MouseButton1 then
               dragging = true
               dragStart = input.Position
               startPos = gui.MainFrame.Position
           end
       end)

       UserInputService.InputChanged:Connect(function(input)
           if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
               local delta = input.Position - dragStart
               TweenService:Create(gui.MainFrame,
                   TweenInfo.new(0.1),
                   {Position = UDim2.new(
                       startPos.X.Scale,
                       startPos.X.Offset + delta.X,
                       startPos.Y.Scale,
                       startPos.Y.Offset + delta.Y
                   )}
               ):Play()
           end
       end)

       UserInputService.InputEnded:Connect(function(input)
           if input.UserInputType == Enum.UserInputType.MouseButton1 then
               dragging = false
           end
       end)

       -- Parent to CoreGui
       pcall(function()
           gui.ScreenGui.Parent = CoreGui
       end)

       return gui
   end

return Library
