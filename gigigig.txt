-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Constants
local TWEEN_INFO = TweenInfo.new(0.3, Enum.EasingStyle.Quart)
local THEMES = {
   Default = {
       Background = Color3.fromRGB(30, 30, 30),
       Secondary = Color3.fromRGB(40, 40, 40),
       Accent = Color3.fromRGB(60, 60, 60),
       Text = Color3.fromRGB(255, 255, 255),
       Border = Color3.fromRGB(70, 70, 70)
   },
   Light = {
       Background = Color3.fromRGB(240, 240, 240),
       Secondary = Color3.fromRGB(220, 220, 220),
       Accent = Color3.fromRGB(200, 200, 200),
       Text = Color3.fromRGB(30, 30, 30),
       Border = Color3.fromRGB(180, 180, 180)
   },
   Midnight = {
       Background = Color3.fromRGB(20, 20, 30),
       Secondary = Color3.fromRGB(30, 30, 45),
       Accent = Color3.fromRGB(40, 40, 60),
       Text = Color3.fromRGB(200, 200, 255),
       Border = Color3.fromRGB(50, 50, 75)
   }
}

-- Core UI Library
local Library = {}
Library.__index = Library

function Library.new(title)
   local self = setmetatable({}, Library)
   self.title = title or "UI Library"
   self.currentTheme = THEMES.Default
   self.tabs = {}
   self.activeTab = nil
   self:Initialize()
   return self
end

function Library:Initialize()
   self.ScreenGui = Instance.new("ScreenGui")
   self.ScreenGui.Name = "EnhancedUI"
   self.ScreenGui.ResetOnSpawn = false
   self.ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

   -- Main UI Frame
   self.MainFrame = Instance.new("Frame")
   self.MainFrame.Name = "MainFrame"
   self.MainFrame.Size = UDim2.new(0, 400, 0, 300)
   self.MainFrame.Position = UDim2.new(0.5, -200, 0.5, -150)
   self.MainFrame.BackgroundColor3 = self.currentTheme.Background
   self.MainFrame.Parent = self.ScreenGui

   -- UI Corner and Stroke
   local corner = Instance.new("UICorner")
   corner.CornerRadius = UDim.new(0, 6)
   corner.Parent = self.MainFrame

   local stroke = Instance.new("UIStroke")
   stroke.Color = self.currentTheme.Border
   stroke.Thickness = 1
   stroke.Parent = self.MainFrame

   -- Top Bar
   self.TopBar = Instance.new("Frame")
   self.TopBar.Size = UDim2.new(1, 0, 0, 30)
   self.TopBar.BackgroundColor3 = self.currentTheme.Secondary
   self.TopBar.Parent = self.MainFrame

   local topCorner = Instance.new("UICorner")
   topCorner.CornerRadius = UDim.new(0, 6)
   topCorner.Parent = self.TopBar

   -- Title
   self.TitleLabel = Instance.new("TextLabel")
   self.TitleLabel.Size = UDim2.new(0, 200, 1, 0)
   self.TitleLabel.Position = UDim2.new(0, 10, 0, 0)
   self.TitleLabel.BackgroundTransparency = 1
   self.TitleLabel.Text = self.title
   self.TitleLabel.TextColor3 = self.currentTheme.Text
   self.TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
   self.TitleLabel.Parent = self.TopBar

   -- Minimize Button
   self.MinimizeButton = Instance.new("TextButton")
   self.MinimizeButton.Size = UDim2.new(0, 30, 0, 30)
   self.MinimizeButton.Position = UDim2.new(1, -35, 0, 0)
   self.MinimizeButton.BackgroundTransparency = 1
   self.MinimizeButton.Text = "-"
   self.MinimizeButton.TextColor3 = self.currentTheme.Text
   self.MinimizeButton.TextSize = 20
   self.MinimizeButton.Parent = self.TopBar

   -- Tab Container
   self.TabContainer = Instance.new("Frame")
   self.TabContainer.Size = UDim2.new(1, 0, 1, -30)
   self.TabContainer.Position = UDim2.new(0, 0, 0, 30)
   self.TabContainer.BackgroundTransparency = 1
   self.TabContainer.Parent = self.MainFrame

   -- Tab Buttons
   self.TabButtons = Instance.new("Frame")
   self.TabButtons.Size = UDim2.new(0, 100, 1, 0)
   self.TabButtons.BackgroundTransparency = 1
   self.TabButtons.Parent = self.TabContainer

   local listLayout = Instance.new("UIListLayout")
   listLayout.Padding = UDim.new(0, 5)
   listLayout.Parent = self.TabButtons

   -- Tab Content
   self.TabContent = Instance.new("Frame")
   self.TabContent.Size = UDim2.new(1, -110, 1, -10)
   self.TabContent.Position = UDim2.new(0, 105, 0, 5)
   self.TabContent.BackgroundTransparency = 1
   self.TabContent.Parent = self.TabContainer

   -- Minimized GUI
   self.MinimizedGui = Instance.new("Frame")
   self.MinimizedGui.Size = UDim2.new(0, 40, 0, 40)
   self.MinimizedGui.Position = UDim2.new(0, 10, 0.5, -20)
   self.MinimizedGui.BackgroundColor3 = self.currentTheme.Secondary
   self.MinimizedGui.Visible = false
   self.MinimizedGui.Parent = self.ScreenGui

   local miniCorner = Instance.new("UICorner")
   miniCorner.CornerRadius = UDim.new(0, 6)
   miniCorner.Parent = self.MinimizedGui

   self.MaximizeButton = Instance.new("TextButton")
   self.MaximizeButton.Size = UDim2.new(1, 0, 1, 0)
   self.MaximizeButton.BackgroundTransparency = 1
   self.MaximizeButton.Text = "+"
   self.MaximizeButton.TextColor3 = self.currentTheme.Text
   self.MaximizeButton.TextSize = 20
   self.MaximizeButton.Parent = self.MinimizedGui

   self:EnableDragging()
   self:SetupMinimizer()
end

function Library:EnableDragging()
   local function CreateDrag(gui)
       local dragging, dragInput, dragStart, startPos
       
       gui.InputBegan:Connect(function(input)
           if input.UserInputType == Enum.UserInputType.MouseButton1 or
              input.UserInputType == Enum.UserInputType.Touch then
               dragging = true
               dragStart = input.Position
               startPos = gui.Position
           end
       end)

       gui.InputEnded:Connect(function(input)
           if input.UserInputType == Enum.UserInputType.MouseButton1 or
              input.UserInputType == Enum.UserInputType.Touch then
               dragging = false
           end
       end)

       UserInputService.InputChanged:Connect(function(input)
           if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or
                          input.UserInputType == Enum.UserInputType.Touch) then
               local delta = input.Position - dragStart
               gui.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
                                      startPos.Y.Scale, startPos.Y.Offset + delta.Y)
           end
       end)
   end

   CreateDrag(self.MainFrame)
   CreateDrag(self.MinimizedGui)
end

function Library:SetupMinimizer()
   self.MinimizeButton.MouseButton1Click:Connect(function()
       self.MainFrame.Visible = false
       self.MinimizedGui.Visible = true
   end)

   self.MaximizeButton.MouseButton1Click:Connect(function()
       self.MainFrame.Visible = true
       self.MinimizedGui.Visible = false
   end)
end

function Library:CreateTab(name)
   local tab = {}
   
   -- Tab Button
   tab.Button = Instance.new("TextButton")
   tab.Button.Size = UDim2.new(1, -10, 0, 30)
   tab.Button.Position = UDim2.new(0, 5, 0, 0)
   tab.Button.BackgroundColor3 = self.currentTheme.Secondary
   tab.Button.Text = name
   tab.Button.TextColor3 = self.currentTheme.Text
   tab.Button.Parent = self.TabButtons

   local corner = Instance.new("UICorner")
   corner.CornerRadius = UDim.new(0, 6)
   corner.Parent = tab.Button

   -- Tab Content
   tab.Content = Instance.new("ScrollingFrame")
   tab.Content.Size = UDim2.new(1, 0, 1, 0)
   tab.Content.BackgroundTransparency = 1
   tab.Content.ScrollBarThickness = 4
   tab.Content.Visible = false
   tab.Content.Parent = self.TabContent

   local listLayout = Instance.new("UIListLayout")
   listLayout.Padding = UDim.new(0, 5)
   listLayout.Parent = tab.Content

   tab.Button.MouseButton1Click:Connect(function()
       if self.activeTab then
           self.activeTab.Content.Visible = false
           TweenService:Create(self.activeTab.Button, TWEEN_INFO, {
               BackgroundColor3 = self.currentTheme.Secondary
           }):Play()
       end
       
       self.activeTab = tab
       tab.Content.Visible = true
       TweenService:Create(tab.Button, TWEEN_INFO, {
           BackgroundColor3 = self.currentTheme.Accent
       }):Play()
   end)

   if not self.activeTab then
       self.activeTab = tab
       tab.Content.Visible = true
       tab.Button.BackgroundColor3 = self.currentTheme.Accent
   end

   return tab
end

function Library:CreateButton(tab, text, callback)
   local button = Instance.new("TextButton")
   button.Size = UDim2.new(1, -10, 0, 30)
   button.Position = UDim2.new(0, 5, 0, 0)
   button.BackgroundColor3 = self.currentTheme.Secondary
   button.Text = text
   button.TextColor3 = self.currentTheme.Text
   button.Parent = tab.Content

   local corner = Instance.new("UICorner")
   corner.CornerRadius = UDim.new(0, 6)
   corner.Parent = button

   button.MouseButton1Click:Connect(callback or function() end)
   return button
end

function Library:CreateToggle(tab, text, callback)
   local toggle = Instance.new("Frame")
   toggle.Size = UDim2.new(1, -10, 0, 30)
   toggle.Position = UDim2.new(0, 5, 0, 0)
   toggle.BackgroundColor3 = self.currentTheme.Secondary
   toggle.Parent = tab.Content

   local corner = Instance.new("UICorner")
   corner.CornerRadius = UDim.new(0, 6)
   corner.Parent = toggle

   local label = Instance.new("TextLabel")
   label.Size = UDim2.new(1, -50, 1, 0)
   label.BackgroundTransparency = 1
   label.Text = text
   label.TextColor3 = self.currentTheme.Text
   label.TextXAlignment = Enum.TextXAlignment.Left
   label.Position = UDim2.new(0, 10, 0, 0)
   label.Parent = toggle

   local indicator = Instance.new("Frame")
   indicator.Size = UDim2.new(0, 20, 0, 20)
   indicator.Position = UDim2.new(1, -25, 0.5, -10)
   indicator.BackgroundColor3 = self.currentTheme.Accent
   indicator.Parent = toggle

   local indicatorCorner = Instance.new("UICorner")
   indicatorCorner.CornerRadius = UDim.new(0, 4)
   indicatorCorner.Parent = indicator

   local enabled = false
   toggle.InputBegan:Connect(function(input)
       if input.UserInputType == Enum.UserInputType.MouseButton1 then
           enabled = not enabled
           TweenService:Create(indicator, TWEEN_INFO, {
               BackgroundColor3 = enabled and Color3.fromRGB(0, 255, 100) or self.currentTheme.Accent
           }):Play()
           if callback then callback(enabled) end
       end
   end)

   return toggle
end

function Library:CreateSlider(tab, text, min, max, default, callback)
   local slider = Instance.new("Frame")
   slider.Size = UDim2.new(1, -10, 0, 45)
   slider.Position = UDim2.new(0, 5, 0, 0)
   slider.BackgroundColor3 = self.currentTheme.Secondary
   slider.Parent = tab.Content

   local corner = Instance.new("UICorner")
   corner.CornerRadius = UDim.new(0, 6)
   corner.Parent = slider

   local label = Instance.new("TextLabel")
   label.Size = UDim2.new(1, -10, 0, 20)
   label.Position = UDim2.new(0, 5, 0, 0)
   label.BackgroundTransparency = 1
   label.Text = text
   label.TextColor3 = self.currentTheme.Text
   label.TextXAlignment = Enum.TextXAlignment.Left
   label.Parent = slider

   local valueLabel = Instance.new("TextLabel")
   valueLabel.Size = UDim2.new(0, 30, 0, 20)
   valueLabel.Position = UDim2.new(1, -35, 0, 0)
   valueLabel.BackgroundTransparency = 1
   valueLabel.Text = tostring(default or min)
   valueLabel.TextColor3 = self.currentTheme.Text
   valueLabel.Parent = slider

   local sliderBar = Instance.new("Frame")
   sliderBar.Size = UDim2.new(1, -20, 0, 4)
   sliderBar.Position = UDim2.new(0, 10, 0, 35)
   sliderBar.BackgroundColor3 = self.currentTheme.Border
   sliderBar.Parent = slider

   local barCorner = Instance.new("UICorner")
   barCorner.CornerRadius = UDim.new(0, 2)
   barCorner.Parent = sliderBar

   local fill = Instance.new("Frame")
   fill.Size = UDim2.new((default or min) / (max - min), 0, 1, 0)
   fill.BackgroundColor3 = self.currentTheme.Accent
   fill.Parent = sliderBar

   local fillCorner = Instance.new("UICorner")
   fillCorner.CornerRadius = UDim.new(0, 2)
   fillCorner.Parent = fill

   local dragging = false
   
   local function updateSlider(input)
       local pos = math.clamp((input.Position.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X, 0, 1)
       local value = math.floor(min + (max - min) * pos)
       
       fill.Size = UDim2.new(pos, 0, 1, 0)
       valueLabel.Text = tostring(value)
       
       if callback then callback(value) end
   end

   sliderBar.InputBegan:Connect(function(input)
       if input.UserInputType == Enum.UserInputType.MouseButton1 then
           dragging = true
           updateSlider(input)
       end
   end)

   UserInputService.InputEnded:Connect(function(input)
       if input.UserInputType == Enum.UserInputType.MouseButton1 then
           dragging = false
       end
   end)

   UserInputService.InputChanged:Connect(function(input)
       if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
           updateSlider(input)
       end
   end)

   return slider
end

function Library:CreateTextbox(tab, text, placeholder, callback)
   local textbox = Instance.new("Frame")
   textbox.Size = UDim2.new(1, -10, 0, 30)
   textbox.Position = UDim2.new(0, 5, 0, 0)
   textbox.BackgroundColor3 = self.currentTheme.Secondary
   textbox.Parent = tab.Content

   local corner = Instance.new("UICorner")
   corner.CornerRadius = UDim.new(0, 6)
   corner.Parent = textbox

   local label = Instance.new("TextLabel")
   label.Size = UDim2.new(0.4, 0, 1, 0)
   label.BackgroundTransparency = 1
   label.Text = text
   label.TextColor3 = self.currentTheme.Text
   label.TextXAlignment = Enum.TextXAlignment.Left
   label.Position = UDim2.new(0, 10, 0, 0)
   label.Parent = textbox

   local input = Instance.new("TextBox")
   input.Size = UDim2.new(0.6, -20, 0, 20)
   input.Position = UDim2.new(0.4, 10, 0.5, -10)
   input.BackgroundColor3 = self.currentTheme.Background
   input.PlaceholderText = placeholder
   input.Text = ""
   input.TextColor3 = self.currentTheme.Text
   input.Parent = textbox

   local inputCorner = Instance.new("UICorner")
   inputCorner.CornerRadius = UDim.new(0, 4)
   inputCorner.Parent = input

   input.FocusLost:Connect(function(enterPressed)
       if enterPressed and callback then
           callback(input.Text)
       end
   end)

   return textbox
end

return Library
