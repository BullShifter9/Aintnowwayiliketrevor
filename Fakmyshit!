-- Simple Murder Check Function
local function isMurder(player)
   if not player.Character then return false end
   
   -- Check backpack and character for knife
   local hasKnife = player.Backpack:FindFirstChild("Knife") or player.Character:FindFirstChild("Knife")
   local role = player:FindFirstChild("PlayerRole")
   
   return hasKnife or (role and role.Value == "Murderer")
end

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UIS = game:GetService("UserInputService") 

-- Player Variables
local plr = Players.LocalPlayer
local char = plr.Character or plr.CharacterAdded:Wait()
local hum = char:WaitForChild("Humanoid")
local root = char:WaitForChild("HumanoidRootPart")

-- Config
local Config = {
   Mode = "Smooth",
   Speed = 16,
   SafeDistance = 20,
   AutoRejoin = true,
   MaxCoins = plr:FindFirstChild("GamePass") and plr.GamePass:FindFirstChild("Elite") and 50 or 40,
   SafeSpots = {}
}

if workspace:FindFirstChild("Lobby") then
   Config.SafeSpots = {
       workspace.Lobby.Position + Vector3.new(0,5,0),
       workspace.Lobby.Position + Vector3.new(10,5,10),
       workspace.Lobby.Position + Vector3.new(-10,5,-10)
   }
end

-- Stats
local Stats = {
   Started = 0,
   Coins = 0,
   Enabled = false,
   Safe = true
}

-- GUI Creation
local GUI = Instance.new("ScreenGui")
GUI.Name = "FarmGUI"
GUI.Parent = game:GetService("CoreGui")

local Main = Instance.new("Frame")
Main.Name = "Main"
Main.Size = UDim2.new(0, 200, 0, 250)
Main.Position = UDim2.new(0.8, 0, 0.5, -125)
Main.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
Main.BorderSizePixel = 0
Main.Parent = GUI

local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 8)
UICorner.Parent = Main

local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(1, 0, 0, 30)
Title.BackgroundTransparency = 1
Title.Text = "MM2 Farm"
Title.TextColor3 = Color3.new(1, 1, 1)
Title.TextSize = 18
Title.Font = Enum.Font.GothamBold
Title.Parent = Main

local function makeButton(name, pos)
   local btn = Instance.new("TextButton")
   btn.Size = UDim2.new(0.8, 0, 0, 25)
   btn.Position = pos
   btn.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
   btn.Text = name
   btn.TextColor3 = Color3.new(1, 1, 1)
   btn.Font = Enum.Font.Gotham
   btn.Parent = Main
   
   local corner = Instance.new("UICorner")
   corner.CornerRadius = UDim.new(0, 6)
   corner.Parent = btn
   
   return btn
end

local SmoothBtn = makeButton("Smooth", UDim2.new(0.1, 0, 0, 40))
local FastBtn = makeButton("Fast", UDim2.new(0.1, 0, 0, 75))
local SafeBtn = makeButton("Safe", UDim2.new(0.1, 0, 0, 110))

local CoinsLabel = Instance.new("TextLabel")
CoinsLabel.Size = UDim2.new(0.8, 0, 0, 25)
CoinsLabel.Position = UDim2.new(0.1, 0, 0, 145)
CoinsLabel.BackgroundTransparency = 1
CoinsLabel.Text = "Coins: 0"
CoinsLabel.TextColor3 = Color3.new(1, 1, 1)
CoinsLabel.Font = Enum.Font.Gotham
CoinsLabel.Parent = Main

local TimeLabel = Instance.new("TextLabel")
TimeLabel.Size = UDim2.new(0.8, 0, 0, 25) 
TimeLabel.Position = UDim2.new(0.1, 0, 0, 170)
TimeLabel.BackgroundTransparency = 1
TimeLabel.Text = "Time: 00:00:00"
TimeLabel.TextColor3 = Color3.new(1, 1, 1)
TimeLabel.Font = Enum.Font.Gotham
TimeLabel.Parent = Main

local ToggleBtn = makeButton("START", UDim2.new(0.1, 0, 0, 205))

-- Farming Functions
local function getMurderer()
   for _, player in pairs(Players:GetPlayers()) do
       if isMurder(player) then
           return player
       end
   end
   return nil
end

local function getSafeSpot()
   local murderer = getMurderer()
   if not murderer then return Config.SafeSpots[1] end
   
   local best = nil
   local maxDist = 0
   
   for _, spot in pairs(Config.SafeSpots) do
       local dist = (murderer.Character.HumanoidRootPart.Position - spot).magnitude
       if dist > maxDist then
           maxDist = dist
           best = spot
       end
   end
   
   return best
end

local FarmModes = {
   Smooth = function(part)
       if not Stats.Safe then return false end
       
       local dist = (root.Position - part.Position).Magnitude
       local tween = TweenService:Create(root, 
           TweenInfo.new(dist/Config.Speed, Enum.EasingStyle.Linear),
           {CFrame = CFrame.new(part.Position)}
       )
       tween:Play()
       tween.Completed:Wait()
       return true
   end,
   
   Fast = function(part)
       if not Stats.Safe then return false end
       root.CFrame = CFrame.new(part.Position)
       task.wait(0.1)
       return true
   end,
   
   Safe = function(part)
       if not Stats.Safe then return false end
       
       local murderer = getMurderer()
       if murderer and (murderer.Character.HumanoidRootPart.Position - part.Position).Magnitude < Config.SafeDistance then
           return false
       end
       
       root.CFrame = CFrame.new(part.Position)
       task.wait(0.1) 
       return true
   end
}

local function collect()
   if Stats.Coins >= Config.MaxCoins then
       if workspace:FindFirstChild("Lobby") then
           root.CFrame = workspace.Lobby.CFrame
       end
       Stats.Enabled = false
       return false
   end

   local murderer = getMurderer()
   if murderer and (murderer.Character.HumanoidRootPart.Position - root.Position).Magnitude < Config.SafeDistance then
       Stats.Safe = false
       root.CFrame = CFrame.new(getSafeSpot())
       task.wait(1)
       Stats.Safe = true
       return false
   end

   for _, item in pairs(workspace:GetChildren()) do
       if ((item.Name == "Token" or item.Name == "SnowToken") and item:FindFirstChild("TokenPart")) or
           (item.Name == "Coin" and item:FindFirstChild("CoinPart")) then
           local part = item:FindFirstChild("TokenPart") or item:FindFirstChild("CoinPart")
           
           if FarmModes[Config.Mode](part) then
               Stats.Coins += 1
               return true
           end
       end
   end
   return false
end

-- Button Handlers
local function updateButtons()
   SmoothBtn.BackgroundColor3 = Config.Mode == "Smooth" and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(45, 45, 45)
   FastBtn.BackgroundColor3 = Config.Mode == "Fast" and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(45, 45, 45)
   SafeBtn.BackgroundColor3 = Config.Mode == "Safe" and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(45, 45, 45)
end

SmoothBtn.MouseButton1Click:Connect(function()
   Config.Mode = "Smooth"
   updateButtons()
end)

FastBtn.MouseButton1Click:Connect(function()
   Config.Mode = "Fast"
   updateButtons()
end)

SafeBtn.MouseButton1Click:Connect(function()
   Config.Mode = "Safe"
   updateButtons()
end)

ToggleBtn.MouseButton1Click:Connect(function()
   Stats.Enabled = not Stats.Enabled
   Stats.Safe = true
   
   if Stats.Enabled then
       ToggleBtn.Text = "STOP"
       ToggleBtn.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
       Stats.Started = os.time()
       
       task.spawn(function()
           while Stats.Enabled do
               pcall(function()
                   if not collect() then task.wait(0.1) end
                   
                   local elapsed = os.time() - Stats.Started
                   TimeLabel.Text = string.format(
                       "Time: %02d:%02d:%02d",
                       math.floor(elapsed/3600),
                       math.floor((elapsed%3600)/60),
                       elapsed%60
                   )
                   CoinsLabel.Text = string.format("Coins: %d", Stats.Coins)
               end)
               task.wait()
           end
       end)
   else
       ToggleBtn.Text = "START"
       ToggleBtn.BackgroundColor3 = Color3.fromRGB(0, 170, 0)
   end
end)

-- Make GUI Draggable
local dragging, dragStart, startPos = false, nil, nil

Main.InputBegan:Connect(function(input)
   if input.UserInputType == Enum.UserInputType.MouseButton1 then
       dragging = true
       dragStart = input.Position
       startPos = Main.Position
   end
end)

UIS.InputEnded:Connect(function(input)
   if input.UserInputType == Enum.UserInputType.MouseButton1 then
       dragging = false
   end
end)

UIS.InputChanged:Connect(function(input)
   if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
       local delta = input.Position - dragStart
       Main.Position = UDim2.new(
           startPos.X.Scale,
           startPos.X.Offset + delta.X,
           startPos.Y.Scale,
           startPos.Y.Offset + delta.Y
       )
   end
end)

updateButtons()
